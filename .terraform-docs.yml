version: '>= 0.14.0'

formatter: markdown table

content: |-
  [![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)
  [![Developed by: Cisco](https://img.shields.io/badge/Developed%20by-Cisco-blue)](https://developer.cisco.com)

  # Easy IMM
  ## Examples for Using the Easy IMM Terraform Modules

  Examples are Shown in the Following Directories:

    * `policies`
    * `pools`
    * `profiles`
    * `templates`

  ### IMPORTANT NOTE

  Notice the `ezi.yaml` extension on the files.  This is how the  `data.utils_yaml_merge.model` is configured to recognize the files that should be imported with the module.

  ## YAML Schema Notes for auto-completion, Help, and Error Validation:

  If you would like to utilize Autocompletion, Help Context, and Error Validation, `(HIGHLY RECOMMENDED)` make sure the files all utilize the `.ezi.yaml` file extension.

  ### Modify `variables.auto.tfvars` to match environment

  `variables.auto.tfvars` contains Terraform variables that I felt fit better outside of the YAML Data Model.  These variables should be configured to be unique to the deployment environment, but examples are shown for the Richfield environemnt in the module.

  #### Notes for the `variables.auto.tfvars`:

    * `intersight_fqdn`:  SaaS will by default be `intersight.com`.  Available in the event of CVA or PVA deployments.
    * `moids_policies`:  Consume Policies from a Data Source instead of a Resource.  This is helpful if you separate the `policies` module from `profiles/templates`.  
    * `moids_pools`:  Consume Pools from a Data Source instead of a Resource.  This is helpful if you seperate the `pools` Module from the `policies` module.
    * `tags`:  Not Required, but by default the version of the script is being flagged here.

  ## Environment Variables

  ### Terraform Cloud/Enterprise - Workspace Variables

  - Add variable `intersight_api_key_id` with the value of <your-api-key>
  - Add variable `intersight_secret_key` with the value of <your-secret-file-content>

  #### Add Other Variables as discussed below based on use cases

  ## [Cloud Posse `tfenv`](https://github.com/cloudposse/tfenv)

  Command line utility to transform environment variables for use with Terraform. (e.g. HOSTNAME â†’ TF_VAR_hostname)

  Recently I adopted the `tfenv` runner to standardize environment variables with multiple orchestration tools.  tfenv makes it so you don't need to add TF_VAR_ to the variables when you add them to the environment.  But it doesn't work for windows would be the caveat.

  In the export examples below, for the Linux Example, the 'TF_VAR_' is excluded because Cloud Posse tfenv is used to insert it during the run.

  ### Aliases for `.bashrc`

  Additionally to Save time on typing commands I use the following aliases by editing the `.bashrc` for my environment.

  ```bash
  alias tfa='tfenv terraform apply main.plan'
  alias tfap='tfenv terraform apply -parallelism=1 main.plan'
  alias tfd='terraform destroy'
  alias tff='terraform fmt'
  alias tfi='terraform init'
  alias tfp='tfenv terraform plan -out=main.plan'
  alias tfu='terraform init -upgrade'
  alias tfv='terraform validate'
  ```

  ## IMPORTANT: 
  
  ALL EXAMPLES BELOW ASSUME USING `tfenv` in LINUX

  #### Linux

  ```bash
  export intersight_api_key_id="<your-api-key>"
  export intersight_secret_key="<secret-key-file-location>"
  ```

  #### Windows

  ```powershell
  $env:TF_VAR_intersight_api_key_id="<your-api-key>"
  $env:TF_VAR_intersight_secret_key="<secret-key-file-location>"
  ```

  ## Sensitive Variables for the Policies Module:

  ### Certificate Management - FIAttached Servers

    * `cert_mgmt_certificate`: Options are 1-5 for Up to 5 Certificates.  Variable Should Point to the File Location of the PEM Certificate.
    * `cert_mgmt_private_key`: Options are 1-5 for Up to 5 Private Keys.  Variable Should Point to the File Location of the PEM Private Key.

  #### Linux

  ```bash
  export cert_mgmt_certificate_1='<cert_mgmt_certificate_file_location>'
  ```
  ```bash
  export cert_mgmt_private_key_1='<cert_mgmt_private_key_file_location>'
  ```

  #### Windows

  ```powershell
  $env:TF_VAR_cert_mgmt_certificate_1='<cert_mgmt_certificate_file_location>'
  ```
  ```powershell
  $env:TF_VAR_cert_mgmt_private_key_1='<cert_mgmt_private_key_file_location>'
  ```

  ### Drive Security - KMIP Sensitive Variables

    * `drive_security_password`: If Authentication is supported/used by the KMIP Server, This is the User Password to Configure.
    * `drive_security_server_ca_certificate`: KMIP Server CA Certificate Contents.

  #### Linux

  ```bash
  export drive_security_password='<drive_security_password>'
  ```
  ```bash
  export drive_security_server_ca_certificate='<drive_security_server_ca_certificate_file_location>'
  ```

  #### Windows

  ```powershell
  $env:TF_VAR_drive_security_password='<drive_security_password>'
  ```
  ```powershell
  $env:TF_VAR_drive_security_server_ca_certificate='<drive_security_server_ca_certificate_file_location>'
  ```

  ### Firmware - CCO  Credentials

    * `cco_user`: If Configuring Firmware Policies, the CCO User for Firmware Downloads.
    * `cco_password`: If Configuring Firmware Policies, the CCO Password for Firmware Downloads.

  #### Linux

  ```bash
  export cco_user='<cco_user>'
  ```
  ```bash
  export cco_password='<cco_password>'
  ```

  #### Windows

  ```powershell
  $env:TF_VAR_cco_user='<cco_user>'
  ```
  ```powershell
  $env:TF_VAR_cco_password='<cco_password>'
  ```

  ### IPMI/iSCSI/LDAP/Local Users/SNMP/Virtual Media

    * `ipmi_key_1`: Currently IPMI isn't Working, I would Skip this for Now.
    * `iscsi_boot_password`: If Configuring CHAP or MSCHAP Authentication, this is the User Password to Use.
    * `binding_parameters_password`: Although You can use a binding password, highly recommend using login user credentials instead in the module.
    * `local_user_password`_1-5: If Configuring Multiple Users, increment the Password based on number of configured Users.
    * `access_community_string`_1-5: Used to Configure 1 or More Community Strings.  Only used if assigned.
    * `snmp_auth_password`_1-5: If Configuring 1 or More SNMP Users.  Only used if assigned.
    * `snmp_privacy_password`_1-5: If Configuring SNMP Users and security_level set to `AuthPriv`.  Only used if assigned.
    * `snmp_trap_community`_1-5: Used by SNMP Trap Servers if using v2c instead of v3.
    * `vmedia_password`_1-5: If Configuring vMedia Mappings and method uses authentication.

  #### Linux

  ```bash
  export cco_user='<cco_user>'
  ```
  ```bash
  export cco_password='<cco_password>'
  ```

  #### Windows

  ```powershell
  $env:TF_VAR_cco_user='<cco_user>'
  ```
  ```powershell
  $env:TF_VAR_cco_password='<cco_password>'
  ```

  {{ .Requirements }}
  {{ .Providers }}
  {{ .Modules }}
  
  ## NOTE:
  **When the Data is merged from the YAML files, it will run through the modules using for_each loop(s).  Sensitive Variables cannot be added to a for_each loop, instead use the variables below to add sensitive values for policies.**

  {{ .Inputs }}
  {{ .Outputs }}

  # Sub Modules

  If you want to see documentation on Variables for Submodules use the links below:

  ## Terraform Registry

  ### [*Policies*](https://registry.terraform.io/modules/terraform-cisco-modules/policies/intersight/latest)

  ### [*Pools*](https://registry.terraform.io/modules/terraform-cisco-modules/pools/intersight/latest)

  ### Profiles

  ### [*Domain*](https://registry.terraform.io/modules/terraform-cisco-modules/profiles-domain/intersight/latest)

  ### [*Chassis/Server + Templates*](https://registry.terraform.io/modules/terraform-cisco-modules/profiles/intersight/latest)

output:
  file: README.md
  mode: replace

sort:
  enabled: false

settings:
  read-comments: false