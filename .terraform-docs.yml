version: '>= 0.14.0'

formatter: markdown table

content: |-
  [![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)
  [![Developed by: Cisco](https://img.shields.io/badge/Developed%20by-Cisco-blue)](https://developer.cisco.com)

  # Easy IMM

  ## Recommended Module Versions are 4.2.11-17560 and 4.2.11-16711

  ## Module(s) Release 4.2.11-17560 Compatibility

  | **Module** | **API Version** | **Provider Version**  | **Appliance Version** | **Module Notes**
  | :--------: | :-------------: | :------------------:  | :-------------------: | :--------------------------: |
  | pools      | 1.0.11-17560    | 1.0.50                | Not Supported         |  Adds IP Pool Block Level IP Configuration. |
  | policies   | 1.0.11-17560    | 1.0.50                | Not Supported         |  adapter_config - Add physical_nic_mode_settings; bios - M8 AMD BIOS attributes; ethernet_network - QnQ capabilities; vnics - sriov; vnic/vhba templates  |
  | profiles   | 1.0.11-17560    | 1.0.50                | Not Supported         |  Adds Chassis/Domain Templates. Note: Derive Profiles is broken |

  ## Module(s) Release 4.2.11-16711 Compatibility

  | **Module** | **API Version** | **Provider Version**  | **Appliance Version** | **Module Notes**
  | :--------: | :-------------: | :------------------:  | :-------------------: | :--------------------------: |
  | pools      | 1.0.11-16711    | 1.0.47                | 1.1.0-0               |  With IP Pools use Configuration outside IP Block. |
  | policies   | 1.0.11-16711    | 1.0.47                | 1.1.0-0               |  Anything supported by YAML Schema Outside of New Features in 17560  |
  | profiles   | 1.0.11-16711    | 1.0.47                | 1.1.0-0               |  Doesn't support Chassis and Domain Templates |

  ## Updates

  * 2024-07-23: Recommended releases are 4.2.11-17560 or 4.2.11-16711.  See Notes for 4.2.11-17560 in the Notes above.  Each has a caveat at this time.
  * 2024-07-18: Provider 1.0.50 Breaks Derive Profiles for Chassis/Domain/Server Templates.  Waiting for a fix for the provider.  [*BUG #276*](https://github.com/CiscoDevNet/terraform-provider-intersight/issues/276).  Version 4.2.11-16711 is an alternative but doesn't support new features listed in table above.
  * 2024-07-16: Terraform Provider 1.0.48 and 1.0.49 depricated due to breaking BIOS changes.  Do not use those provider versions

  ## Examples for Using the Easy IMM Terraform Modules

  Examples are shown in the following directories:

    * `policies`
    * `pools`
    * `profiles`
    * `templates`

  ### IMPORTANT NOTES

  Take notice of the `ezi.yaml` extension on the files.  This is how the  `data.utils_yaml_merge.model` is configured to recognize the files that should be imported with the module.

  The Structure of the YAML files is very flexible.  You can have all the YAML Data in a single file or you can have it in multiple individual folders like is shown in this module.  The important part is that the `data.utils_yaml_merge.model` is configured to read the folders that you put the Data into.

  When defining Identity reservations under a server profile.  See example in `profiles` folder.  Note the flag in the example with `ignore_reservations`.  Reservation records are ephimeral.  Meaning that as soon as the reservation is assigned to a server profile, the identity reservation record is removed from the API.  Thus, after you run the first plan and the identities are created, this flag should be configured to `true` or you need to remove the reservations from the servers.  Either way the reservations will only work on the first apply.  Subsequent applies with the reservations defined will cause the plan/apply to fail due to the identity being consumed.

  ## YAML Schema Notes for auto-completion, Help, and Error Validation:

  If you would like to utilize Autocompletion, Help Context, and Error Validation, `(HIGHLY RECOMMENDED)` make sure the files all utilize the `.ezi.yaml` file extension.

  And Add the Following to `YAML: Schemas`.  In Visual Studio Code: Settings > Settings > Search for `YAML: Schema`: Click edit in `settings.json`.  In the `yaml.schemas` section:

  ```bash
  "https://raw.githubusercontent.com/terraform-cisco-modules/easy-imm/main/yaml_schema/easy-imm.json": "*.ezi.yaml"
  ```

  Soon the Schema for these YAML Files have been registered with [*SchemaStore*](https://github.com/SchemaStore/schemastore/blob/master/src/api/json/catalog.json) via utilizing this `.ezi.yaml` file extension.  But until that is complete, need to still add to settings.

  ### Modify `global_settings.ezi.yaml` to match environment

  `global_settings.ezi.yamls` contains variables related to authentication to Intersight and an optional global tags for tagging objects.

  #### Notes for the `global_settings.ezi.yamls`

    * `debugging`: This is used to enable the output of the keys for resources that are not defined in the YAML configuration but are consumed.
    * `intersight_fqdn`:  SaaS will by default be `intersight.com`.  Available in the event of CVA or PVA deployments.
    * `tags`:  Not Required, but by default the version of the script is being flagged here.

  #### Note: Modules can be added or removed dependent on the use case.  The primary example shown is consuming/showing a full environment deployment.

  ## [Cloud Posse `tfenv`](https://github.com/cloudposse/tfenv)

  Command line utility to transform environment variables for use with Terraform. (e.g. HOSTNAME â†’ TF_VAR_hostname)

  Recently I adopted the `tfenv` runner to standardize environment variables with multiple orchestration tools.  tfenv makes it so you don't need to add TF_VAR_ to the variables when you add them to the environment.  But it doesn't work for windows would be the caveat.

  In the export examples below, for the Linux Example, the 'TF_VAR_' is excluded because Cloud Posse tfenv is used to insert it during the run.

  ### Make sure you have already installed go
  
  ## [go](https://go.dev/doc/install)

  ```bash
  go install github.com/cloudposse/tfenv@latest
  ```

  ### Add go/bin to PATH

  ```bash
  GOPATH="$HOME/go"
  PATH="$GOPATH/bin:$PATH"
  ```

  ### Aliases for `.bashrc`

  Additionally to Save time on typing commands I use the following aliases by editing the `.bashrc` for my environment.

  ```bash
  alias tfa='tfenv terraform apply main.plan'
  alias tfap='tfenv terraform apply -parallelism=1 main.plan'
  alias tfd='tfenv terraform destroy'
  alias tff='terraform fmt'
  alias tfi='terraform init'
  alias tfim='tfenv terraform import'
  alias tfp='tfenv terraform plan -out=main.plan'
  alias tfu='terraform init -upgrade'
  alias tfv='terraform validate'
  ```

  ## Recommended Firmware

  In the `recommended_firmware` folder is a simple terraform setup that you can use to query Intersight for the latest recommended firmware for servers.  Following is an example output:

  ## Creating Server Profiles from Templates or Attaching Server Profiles to Templates

  If you want to create server profiles from templates use the flag `create_from_template` under the server profile in <org>:profiles:server.  See examples in `./profiles`.

  Do not create from template if you want to assign identity reservations to a server profile.  Instead set the `attach_template` flag in the server profile.  This will also attach the template to the profile but will reserve the identities to the profile prior to template attachement.

  ## Updating Server Profile Templates attached to a Server Profiles

  There are a few situations where Terraform doesn't work well with Intersight.  One example is with Templates associated to Server Profiles.  In the Intersight GUI when a change is made to a template or the template associated to a server profile is updated the `bulk/MoMerger` API is called to make the update to all the servers associated to a template.  This API call is ephimeral, meaning the object is not maintained.  So to provide a quick way to work around this I have the example in the folder `update_server_template` that can be used to update the servers associated to a template when you make a change to the template or when you change the template associated to a servers.

  Unfortanately the other thing that would be nice to do along with this is to compare the template mod_time to timestamp(), but timestamp() doesn't take effect until apply so it fails on the plan.  For now this is the best workaround I could come up with.  If you have other thoughts feel free to submit a Pull request.

  If you do use this, simply delete the terraform.tfstate file in this folder each time you run it.  The objects don't actually exist so the state file provides no benefit.

  ## Environment Variables

  Note that all the variables in `variables.tf` are marked as sensitive.  Meaning these are variables that shouldn't be exposed due to the sensitive nature of them.

  Take note of the `locals.tf` that currently has all the sensitive variables mapped:

    * `certificate_management`
    * `drive_security`
    * `firmware`
    * `ipmi_over_lan`
    * `iscsi_boot`
    * `ldap`
    * `local_user`
    * `persistent_memory`
    * `snmp`
    * `virtual_media`

  The Reason to add these variables as maps of string is to allow the flexibility to add or remove iterations of these sensitive variables as needed.  Sensitive Variables cannot be iterated with a `for_each` loop.  Thus instead of adding these variables to the YAML schema, directly, they are added to these seperate maps to allow lookup of the variable index.

  In example, if you needed to add 100 iterations of the `certificate_management` variables you can do that, and simply reference the index in the map of the iteration that will consume that instance.

  ### Terraform Cloud/Enterprise - Workspace Variables

  - Add variable `intersight_api_key_id` with the value of <your-api-key>
  - Add variable `intersight_secret_key` with the value of <your-secret-file-content>

  #### Add Other Variables as discussed below based on use cases

  ## IMPORTANT: 
  
  ALL EXAMPLES BELOW ASSUME USING `tfenv` in LINUX

  #### Linux

  ```bash
  export intersight_api_key_id="<your-api-key>"
  export intersight_secret_key="<secret-key-file-location>"
  ```

  #### Windows

  ```powershell
  $env:TF_VAR_intersight_api_key_id="<your-api-key>"
  $env:TF_VAR_intersight_secret_key="<secret-key-file-location>"
  ```

  ## Sensitive Variables for the Policies Module:

  Take note of the `locals.tf` that currently has all the sensitive variables mapped.

  This is the default sensitive variable mappings.  You can add or remove to these according to the needs of your environment.
  
  The important point is that if you need more than is added by default you can expand the locals.tf and variables.tf to accomodate your environment.

  ## To Assign any of these values for consumption you can define them as discussed below.

  ### Certificate Management

    * `cert_mgmt_certificate`: Options are by default 1-5 for Up to 5 Certificates.  Variable Should Point to the File Location of the PEM Certificate or be the value of the PEM certificate.
    * `cert_mgmt_private_key`: Options are by default 1-5 for Up to 5 Private Keys.  Variable Should Point to the File Location of the PEM Private Key or be the value of the PEM Private Key.

  #### Linux

  ```bash
  export cert_mgmt_certificate_1='<cert_mgmt_certificate_file_location>'
  ```
  ```bash
  export cert_mgmt_private_key_1='<cert_mgmt_private_key_file_location>'
  ```

  #### Windows

  ```powershell
  $env:TF_VAR_cert_mgmt_certificate_1='<cert_mgmt_certificate_file_location>'
  ```
  ```powershell
  $env:TF_VAR_cert_mgmt_private_key_1='<cert_mgmt_private_key_file_location>'
  ```

  ### Drive Security - KMIP Sensitive Variables

    * `drive_security_password`: If Authentication is supported/used by the KMIP Server, This is the User Password to Configure.
    * `drive_security_server_ca_certificate`: KMIP Server CA Certificate Contents.

  #### Linux

  ```bash
  export drive_security_password='<drive_security_password>'
  ```
  ```bash
  export drive_security_server_ca_certificate='<drive_security_server_ca_certificate_file_location>'
  ```

  #### Windows

  ```powershell
  $env:TF_VAR_drive_security_password='<drive_security_password>'
  ```
  ```powershell
  $env:TF_VAR_drive_security_server_ca_certificate='<drive_security_server_ca_certificate_file_location>'
  ```

  ### Firmware - CCO  Credentials

    * `cco_user`: If Configuring Firmware Policies, the CCO User for Firmware Downloads.
    * `cco_password`: If Configuring Firmware Policies, the CCO Password for Firmware Downloads.

  #### Linux

  ```bash
  export cco_user='<cco_user>'
  ```
  ```bash
  export cco_password='<cco_password>'
  ```

  #### Windows

  ```powershell
  $env:TF_VAR_cco_user='<cco_user>'
  ```
  ```powershell
  $env:TF_VAR_cco_password='<cco_password>'
  ```

  ## Execute the Terraform Plan

  ### Terraform Cloud

  When running in Terraform Cloud with VCS Integration the first Plan will need to be run from the UI but subsiqent runs should trigger automatically

  ### Terraform CLI

  * Execute the Plan - Linux

  ```bash
  # First time execution requires initialization.  Not needed on subsequent runs.
  terraform init
  terraform plan -out="main.plan"
  terraform apply "main.plan"
  ```

  * Execute the Plan - Windows

  ```powershell
  # First time execution requires initialization.  Not needed on subsequent runs.
  terraform.exe init
  terraform.exe plan -out="main.plan"
  terraform.exe apply "main.plan"
  ```

  {{ .Requirements }}
  {{ .Providers }}
  {{ .Modules }}
  
  ## NOTE:
  **When the Data is merged from the YAML files, it will run through the modules using for_each loop(s).  Sensitive Variables cannot be added to a for_each loop, instead use the variables below to add sensitive values for policies.**

  {{ .Inputs }}
  {{ .Outputs }}

  # Sub Modules

  If you want to see documentation on Variables for Submodules use the links below:

  ## Terraform Registry

  ### * [*Policies*](https://registry.terraform.io/modules/terraform-cisco-modules/policies/intersight/latest)

  ### * [*Pools*](https://registry.terraform.io/modules/terraform-cisco-modules/pools/intersight/latest)

  ### * [*Profiles*](https://registry.terraform.io/modules/terraform-cisco-modules/profiles/intersight/latest)

output:
  file: README.md
  mode: replace

sort:
  enabled: false

settings:
  read-comments: false