version: '>= 0.14.0'

formatter: markdown table

content: |-
  [![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)
  [![Developed by: Cisco](https://img.shields.io/badge/Developed%20by-Cisco-blue)](https://developer.cisco.com)

  # Easy IMM
  ## Examples for Using the Easy IMM Terraform Modules

  Examples are Shown in the Following Directories:

    * `policies`
    * `pools`
    * `profiles`
    * `templates`

  ### IMPORTANT NOTE

  Notice the `ezi.yaml` extension on the files.  This is how the  `data.utils_yaml_merge.model` is configured to recognize the files that should be imported with the module.

  The Structure of the YAML Files is very flexible.  You can have all the YAML Data in a single file or you can have it in multiple individual folders like is shown in this module.  The important part is that the `data.utils_yaml_merge.model` is configured to read the folders that you put the Data into.

  ## YAML Schema Notes for auto-completion, Help, and Error Validation:

  If you would like to utilize Autocompletion, Help Context, and Error Validation, `(HIGHLY RECOMMENDED)` make sure the files all utilize the `.ezi.yaml` file extension.

  And Add the Following to YAML: Schemas in Visual Studio Code: Settings > Search for YAML: Schema: Click edit in `settings.json`.  In the `yaml.schemas` section:

  ```bash
  "https://raw.githubusercontent.com/terraform-cisco-modules/easy-imm/main/yaml_schema/easy-imm.json": "*.ezi.yaml"
  ```

  Soon the Schema for these YAML Files have been registered with [*SchemaStore*](https://github.com/SchemaStore/schemastore/blob/master/src/api/json/catalog.json) via utilizing this `.ezi.yaml` file extension.  But until that is complete, need to still add to settings.

  ### Modify `global_settings.eza.yaml` to match environment

  `global_settings.eza.yamls` contains variables related to authentication to Intersight and an optional global tags for tagging objects.

  #### Notes for the `global_settings.eza.yamls`

    * `intersight_fqdn`:  SaaS will by default be `intersight.com`.  Available in the event of CVA or PVA deployments.
    * `moids_policies`:  Consume Policies from a Data Source instead of a Resource.  This is helpful if you separate the `policies` module from `profiles/templates`.  
    * `moids_pools`:  Consume Pools from a Data Source instead of a Resource.  This is helpful if you seperate the `pools` Module from the `policies` module.
    * `tags`:  Not Required, but by default the version of the script is being flagged here.

  #### Note: Modules can be added or removed dependent on the use case.  The primary example shown is consuming/showing a full environment deployment.

  ## [Cloud Posse `tfenv`](https://github.com/cloudposse/tfenv)

  Command line utility to transform environment variables for use with Terraform. (e.g. HOSTNAME â†’ TF_VAR_hostname)

  Recently I adopted the `tfenv` runner to standardize environment variables with multiple orchestration tools.  tfenv makes it so you don't need to add TF_VAR_ to the variables when you add them to the environment.  But it doesn't work for windows would be the caveat.

  In the export examples below, for the Linux Example, the 'TF_VAR_' is excluded because Cloud Posse tfenv is used to insert it during the run.

  ### Aliases for `.bashrc`

  Additionally to Save time on typing commands I use the following aliases by editing the `.bashrc` for my environment.

  ```bash
  alias tfa='tfenv terraform apply main.plan'
  alias tfap='tfenv terraform apply -parallelism=1 main.plan'
  alias tfd='terraform destroy'
  alias tff='terraform fmt'
  alias tfi='terraform init'
  alias tfp='tfenv terraform plan -out=main.plan'
  alias tfu='terraform init -upgrade'
  alias tfv='terraform validate'
  ```

  ## Environment Variables

  Note that all the variables in `variables.tf` are marked as sensitive.  Meaning these are variables that shouldn't be exposed due to the sensitive nature of them.

  Take note of the `locals.tf` that currently has all the sensitive variables mapped:

    * `certificate_management`
    * `drive_security`
    * `firmware`
    * `ipmi_over_lan`
    * `iscsi_boot`
    * `ldap`
    * `local_user`
    * `persistent_memory`
    * `snmp`
    * `virtual_media`

  The Reason to add these variables as maps of string is to allow the flexibility to add or remove iterations of these sensitive variables as needed.  Sensitive Variables cannot be iterated with a `for_each` loop.  Thus instead of adding these variables to the YAML schema, directly, they are added to these seperate maps to allow lookup of the variable index.

  In example, if you needed to add 100 iterations of the `certificate_management` variables you can do that, and simply reference the index in the map of the iteration that will consume that instance.

  ### Terraform Cloud/Enterprise - Workspace Variables

  - Add variable `intersight_api_key_id` with the value of <your-api-key>
  - Add variable `intersight_secret_key` with the value of <your-secret-file-content>

  #### Add Other Variables as discussed below based on use cases

  ## IMPORTANT: 
  
  ALL EXAMPLES BELOW ASSUME USING `tfenv` in LINUX

  #### Linux

  ```bash
  export intersight_api_key_id="<your-api-key>"
  export intersight_secret_key="<secret-key-file-location>"
  ```

  #### Windows

  ```powershell
  $env:TF_VAR_intersight_api_key_id="<your-api-key>"
  $env:TF_VAR_intersight_secret_key="<secret-key-file-location>"
  ```

  ## Sensitive Variables for the Policies Module:

  Take note of the `locals.tf` that currently has all the sensitive variables mapped.

  This is the default sensitive variable mappings.  You can add or remove to these according to the needs of your environment.
  
  The important point is that if you need more than is added by default you can expand the locals.tf and variables.tf to accomodate your environment.

  ## To Assign any of these values for consumption you can define them as discussed below.

  ### Certificate Management

    * `cert_mgmt_certificate`: Options are by default 1-5 for Up to 5 Certificates.  Variable Should Point to the File Location of the PEM Certificate or be the value of the PEM certificate.
    * `cert_mgmt_private_key`: Options are by default 1-5 for Up to 5 Private Keys.  Variable Should Point to the File Location of the PEM Private Key or be the value of the PEM Private Key.

  #### Linux

  ```bash
  export cert_mgmt_certificate_1='<cert_mgmt_certificate_file_location>'
  ```
  ```bash
  export cert_mgmt_private_key_1='<cert_mgmt_private_key_file_location>'
  ```

  #### Windows

  ```powershell
  $env:TF_VAR_cert_mgmt_certificate_1='<cert_mgmt_certificate_file_location>'
  ```
  ```powershell
  $env:TF_VAR_cert_mgmt_private_key_1='<cert_mgmt_private_key_file_location>'
  ```

  ### Drive Security - KMIP Sensitive Variables

    * `drive_security_password`: If Authentication is supported/used by the KMIP Server, This is the User Password to Configure.
    * `drive_security_server_ca_certificate`: KMIP Server CA Certificate Contents.

  #### Linux

  ```bash
  export drive_security_password='<drive_security_password>'
  ```
  ```bash
  export drive_security_server_ca_certificate='<drive_security_server_ca_certificate_file_location>'
  ```

  #### Windows

  ```powershell
  $env:TF_VAR_drive_security_password='<drive_security_password>'
  ```
  ```powershell
  $env:TF_VAR_drive_security_server_ca_certificate='<drive_security_server_ca_certificate_file_location>'
  ```

  ### Firmware - CCO  Credentials

    * `cco_user`: If Configuring Firmware Policies, the CCO User for Firmware Downloads.
    * `cco_password`: If Configuring Firmware Policies, the CCO Password for Firmware Downloads.

  #### Linux

  ```bash
  export cco_user='<cco_user>'
  ```
  ```bash
  export cco_password='<cco_password>'
  ```

  #### Windows

  ```powershell
  $env:TF_VAR_cco_user='<cco_user>'
  ```
  ```powershell
  $env:TF_VAR_cco_password='<cco_password>'
  ```

  ## Execute the Terraform Plan

  ### Terraform Cloud

  When running in Terraform Cloud with VCS Integration the first Plan will need to be run from the UI but subsiqent runs should trigger automatically

  ### Terraform CLI

  * Execute the Plan - Linux

  ```bash
  # First time execution requires initialization.  Not needed on subsequent runs.
  terraform init
  terraform plan -out="main.plan"
  terraform apply "main.plan"
  ```

  * Execute the Plan - Windows

  ```powershell
  # First time execution requires initialization.  Not needed on subsequent runs.
  terraform.exe init
  terraform.exe plan -out="main.plan"
  terraform.exe apply "main.plan"
  ```

  {{ .Requirements }}
  {{ .Providers }}
  {{ .Modules }}
  
  ## NOTE:
  **When the Data is merged from the YAML files, it will run through the modules using for_each loop(s).  Sensitive Variables cannot be added to a for_each loop, instead use the variables below to add sensitive values for policies.**

  {{ .Inputs }}
  {{ .Outputs }}

  # Sub Modules

  If you want to see documentation on Variables for Submodules use the links below:

  ## Terraform Registry

  ### [*Policies*](https://registry.terraform.io/modules/terraform-cisco-modules/policies/intersight/latest)

  ### [*Pools*](https://registry.terraform.io/modules/terraform-cisco-modules/pools/intersight/latest)

  ### Profiles

  ### [*Domain*](https://registry.terraform.io/modules/terraform-cisco-modules/profiles-domain/intersight/latest)

  ### [*Chassis/Server + Templates*](https://registry.terraform.io/modules/terraform-cisco-modules/profiles/intersight/latest)

output:
  file: README.md
  mode: replace

sort:
  enabled: false

settings:
  read-comments: false